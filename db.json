{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-Butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/tags/index.md","hash":"80d1927de9dfbc950a86c102aca79f229d880c14","modified":1683773965168},{"_id":"source/link/index.md","hash":"c0dad3c08cb1a8ddfda33790f7f23feac90edd35","modified":1683621593669},{"_id":"source/_posts/hello-world.md","hash":"ad860a842521cfe13876a9be35da7daecd7c6268","modified":1683623830352},{"_id":"source/categories/index.md","hash":"738a29c9059a001568a70f5e0f4f50a340f43100","modified":1683773990168},{"_id":"source/_posts/skywalking-采样率.md","hash":"64b0f481de3671c004886b47c800bbd456b410bc","modified":1683774390117},{"_id":"node_modules/hexo-theme-Butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1683615793162},{"_id":"node_modules/hexo-theme-Butterfly/README.md","hash":"52967a864c244af4db8c63902586cb617ee5b8aa","modified":1683615793410},{"_id":"node_modules/hexo-theme-Butterfly/README_CN.md","hash":"e19021371184361261ddef1d98eb308d78922714","modified":1683615793408},{"_id":"node_modules/hexo-theme-Butterfly/_config.yml","hash":"adc8f25ce9d499c18731b55735e5bc37262383ca","modified":1683615793667},{"_id":"node_modules/hexo-theme-Butterfly/package.json","hash":"c55fce25d8c52283f1f1ce207819f1b3148d373a","modified":1683615793406},{"_id":"node_modules/hexo-theme-Butterfly/plugins.yml","hash":"acc74f24c7e94fe9ded264307a4201c9b410cd9b","modified":1683615793677},{"_id":"node_modules/hexo-theme-Butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1683615793673},{"_id":"node_modules/hexo-theme-Butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1683615793675},{"_id":"node_modules/hexo-theme-Butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":1683615793688},{"_id":"node_modules/hexo-theme-Butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":1683615793693},{"_id":"node_modules/hexo-theme-Butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1683615793443},{"_id":"node_modules/hexo-theme-Butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1683615793466},{"_id":"node_modules/hexo-theme-Butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1683615793516},{"_id":"node_modules/hexo-theme-Butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1683615793532},{"_id":"node_modules/hexo-theme-Butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1683615793540},{"_id":"node_modules/hexo-theme-Butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1683615793559},{"_id":"node_modules/hexo-theme-Butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1683615793679},{"_id":"node_modules/hexo-theme-Butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1683615793676},{"_id":"node_modules/hexo-theme-Butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1683615793671},{"_id":"node_modules/hexo-theme-Butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1683615793680},{"_id":"node_modules/hexo-theme-Butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1683615793669},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1683615793488},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1683615793414},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1683615793496},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1683615793520},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1683615793534},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1683615793432},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1683615793553},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/rightside.pug","hash":"83a1f2d31792206d432e8e2041e284d88327c02e","modified":1683615793550},{"_id":"node_modules/hexo-theme-Butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1683615793246},{"_id":"node_modules/hexo-theme-Butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1683615793234},{"_id":"node_modules/hexo-theme-Butterfly/scripts/events/init.js","hash":"3ace1139182d3d367149db138990891427f3356e","modified":1683615793254},{"_id":"node_modules/hexo-theme-Butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1683615793247},{"_id":"node_modules/hexo-theme-Butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1683615793387},{"_id":"node_modules/hexo-theme-Butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1683615793388},{"_id":"node_modules/hexo-theme-Butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1683615793393},{"_id":"node_modules/hexo-theme-Butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1683615793239},{"_id":"node_modules/hexo-theme-Butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1683615793403},{"_id":"node_modules/hexo-theme-Butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1683615793241},{"_id":"node_modules/hexo-theme-Butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1683615793247},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1683615793244},{"_id":"node_modules/hexo-theme-Butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1683615793255},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1683615793249},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1683615793251},{"_id":"node_modules/hexo-theme-Butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1683615793385},{"_id":"node_modules/hexo-theme-Butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1683615793389},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1683615793252},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1683615793257},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1683615793381},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1683615793256},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1683615793383},{"_id":"node_modules/hexo-theme-Butterfly/source/js/main.js","hash":"dca55899b7c92ebee6191bef127ea5e2283ecc63","modified":1683615793379},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1683615793391},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1683615793394},{"_id":"node_modules/hexo-theme-Butterfly/source/js/utils.js","hash":"7bec147ae2b313fbd0331d87018f99715368fc4b","modified":1683615793402},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1683615793396},{"_id":"node_modules/hexo-theme-Butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1683615793232},{"_id":"node_modules/hexo-theme-Butterfly/source/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1683615793400},{"_id":"node_modules/hexo-theme-Butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1683615793411},{"_id":"node_modules/hexo-theme-Butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1683615793228},{"_id":"node_modules/hexo-theme-Butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1683615793663},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/config.pug","hash":"75e7a524af64fbaaaf7b05a1b1922bf6940d7afe","modified":1683615793469},{"_id":"node_modules/hexo-theme-Butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1683615793627},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1683615793530},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1683615793440},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1683615793529},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1683615793468},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1683615793543},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1683615793541},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/header/index.pug","hash":"0c1551ef80bbece550fe520d91e21f083cbc14fe","modified":1683615793498},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1683615793554},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1683615793494},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1683615793538},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1683615793556},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/loading/fullpage-loading.pug","hash":"68cda524337dfe2e1467318a4a6c124b4c3845a7","modified":1683615793489},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1683615793500},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1683615793525},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1683615793450},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1683615793531},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/mixins/post-ui.pug","hash":"294df7a74cf36af3a7030274d8b745979c1c8c70","modified":1683615793539},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1683615793465},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1683615793474},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/page/flink.pug","hash":"a59bcfbb609a099c1bf5be40b7a94e7e2b06fc4a","modified":1683615793486},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1683615793559},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1683615793537},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1683615793549},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1683615793442},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1683615793482},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1683615793535},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1683615793536},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/subtitle.pug","hash":"13015a98d0d5e1ef2cec294231529010395b19de","modified":1683615793557},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1683615793542},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1683615793451},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1683615793452},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1683615793453},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1683615793454},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1683615793457},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1683615793456},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1683615793528},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1683615793459},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1683615793458},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1683615793462},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1683615793461},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1683615793463},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1683615793460},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1683615793515},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_global/function.styl","hash":"7fdfbe8f97b41588bbd5c6f27e7e85a881b28954","modified":1683615793610},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_global/index.styl","hash":"de10b113f9cb9a68d257a39d6409905acfd559ef","modified":1683615793622},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_highlight/highlight.styl","hash":"57a19eb0c418d92a88b143f56ccb8cd60e6d7ad0","modified":1683615793620},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1683615793585},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1683615793653},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1683615793590},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1683615793596},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/head.styl","hash":"45d71dbb2a61e30989851ba29bb8be7094574d14","modified":1683615793612},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/footer.styl","hash":"83553445fbc92cad4ad220fbd87b4c3db958c32a","modified":1683615793608},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1683615793632},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1683615793637},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/post.styl","hash":"e24046fad288a13897195038cb7a63d1014cd7b8","modified":1683615793639},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1683615793645},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1683615793644},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1683615793647},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1683615793648},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/third-party.styl","hash":"ca39e634668ed4fbb43267ec4782c2b55c44e698","modified":1683615793655},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_mode/darkmode.styl","hash":"7ff0c456fae2717ddbbb9f8fae2734d449a5448b","modified":1683615793600},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_mode/readmode.styl","hash":"ffea9e7c1543edcf080381e7b99828954c2f2cef","modified":1683615793640},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1683615793578},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1683615793581},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_page/common.styl","hash":"e4b9d6164e97b30c84e1218c7543c60f6b29edcc","modified":1683615793598},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1683615793589},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1683615793607},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1683615793652},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1683615793580},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_page/homepage.styl","hash":"bb470da1d2ba292cae0a30a252f82f37c4130d2d","modified":1683615793620},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_search/index.styl","hash":"678e56ad2e46b630364540fc6a881d6801192dcd","modified":1683615793625},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1683615793634},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1683615793611},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1683615793588},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1683615793614},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1683615793616},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1683615793628},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1683615793629},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1683615793635},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1683615793650},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1683615793661},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1683615793165},{"_id":"node_modules/hexo-theme-Butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1683615793237},{"_id":"node_modules/hexo-theme-Butterfly/source/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1683615793259},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1683615793501},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"4ff8e67cd1c9058c0c894737b9b247a812079ae2","modified":1683615793444},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1683615793476},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1683615793485},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1683615793503},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1683615793544},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1683615793563},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1683615793567},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"55acc455ca8e13211e3906cf78e487cc92accee5","modified":1683615793571},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1683615793467},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1683615793471},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1683615793506},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1683615793473},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/chat/messenger.pug","hash":"3ce0461534b786cb71d9141dff35fa5cb70e22b9","modified":1683615793527},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/artalk.pug","hash":"90779382c8675e5a0b2d1ef2250294de926707f4","modified":1683615793446},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1683615793560},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1683615793416},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"6e17b2cea503eabeb328835038812cfa95f15871","modified":1683615793479},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/disqus.pug","hash":"9ef303da16d180619da18b146ddb9bc35f66bdbf","modified":1683615793477},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0704efed9079c867ab5f7bee7381a6c869154c73","modified":1683615793484},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"2fc5627eb63118c83df9422b47c801822e28df98","modified":1683615793492},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1683615793507},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1683615793517},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1683615793521},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/remark42.pug","hash":"598790433e3c9be28b0063bff08d257acd0abf75","modified":1683615793545},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4d78f6266d0870c06c10eaf47c951bd4d9a7732e","modified":1683615793565},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/utterances.pug","hash":"2a8d02ed9303092e8816f6489a443e7388102470","modified":1683615793566},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1683615793568},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/giscus.pug","hash":"5127bc550a2edb1ab9f45416e1964c76e8201544","modified":1683615793491},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/waline.pug","hash":"26ba1fc99117993087b1c6e02daa2626627d8eb1","modified":1683615793573},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1683615793510},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1683615793519},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/math/mathjax.pug","hash":"0ea633b11b357afa50c200290d19c32467d58a1d","modified":1683615793524},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/math/mermaid.pug","hash":"d92bbf51626fcc5608b53273cf40db0b5b69c0d4","modified":1683615793526},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"3942d6643683a3c42bbb5f4cf4a7df21debb8498","modified":1683615793448},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":1683615793475},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":1683615793493},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":1683615793547},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1683615793511},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":1683615793569},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":1683615793562},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"531d7b6992a737742f7b3ae343e1f03aab947f4c","modified":1683615793575},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1683615793436},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1683615793419},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1683615793513},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1683615793552},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1683615793438},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1683615793480},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1683615793512},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1683615793603},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1683615793623},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1683615793606},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1683615793624},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1683615793630},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1683615793522},{"_id":"public/search.xml","hash":"170920557462be1708cd779115fa117f749f5f5c","modified":1683791193814},{"_id":"public/categories/index.html","hash":"d0b64d627ee42baf1f68221921d831ff58d90f3d","modified":1683791193814},{"_id":"public/tags/index.html","hash":"fda59929cb9f41a6e8c7e3a72e8203b2523228b4","modified":1683791193814},{"_id":"public/link/index.html","hash":"4095b4d079d2c6d0482d8ceb2ac4290748da2a4c","modified":1683791193814},{"_id":"public/2023/05/09/skywalking-采样率/index.html","hash":"3feaea4707e6cf0016d6c9736db59e7822046b7e","modified":1683791193814},{"_id":"public/2023/05/09/hello-world/index.html","hash":"31f8ef6d221df3d4c7cbcd56c6d15581a97ddc80","modified":1683791193814},{"_id":"public/archives/index.html","hash":"d1133e7b6b132de0c8d54c97802b1726207f874a","modified":1683791193814},{"_id":"public/archives/2023/index.html","hash":"7cebb62a97691ec9eeebd85682fb2bfceb8e4175","modified":1683791193814},{"_id":"public/archives/2023/05/index.html","hash":"b1b6c100d21fce5ccbd59ec2161d03d5900ad4c7","modified":1683791193814},{"_id":"public/categories/学习笔记/index.html","hash":"62cc3b02cc5786271242b59582b3b47092a707a7","modified":1683791193814},{"_id":"public/categories/学习笔记/链路追踪/index.html","hash":"e94a3e46526d0efcb4e89be479ef1b9c432e7744","modified":1683791193814},{"_id":"public/index.html","hash":"6f5cb2634a9008403dbb2fe4c4b0dafede15e5dc","modified":1683791193814},{"_id":"public/tags/skywalking/index.html","hash":"ad49ae3deb1b2d334dd03a2c7a3b76f7c8f18409","modified":1683791193814},{"_id":"public/tags/java/index.html","hash":"04d70a7b6ad5212607091e2de34865e57bb6794a","modified":1683791193814},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1683791193814},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1683791193814},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1683791193814},{"_id":"public/js/utils.js","hash":"7bec147ae2b313fbd0331d87018f99715368fc4b","modified":1683791193814},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1683791193814},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1683791193814},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1683791193814},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1683791193814},{"_id":"public/js/main.js","hash":"dca55899b7c92ebee6191bef127ea5e2283ecc63","modified":1683791193814},{"_id":"public/css/index.css","hash":"1b2881f69327339da7f6ed993d425ee00bc2e523","modified":1683791193814}],"Category":[{"name":"学习笔记","_id":"clhitswwv00052kfwbie7ftzs"},{"name":"链路追踪","parent":"clhitswwv00052kfwbie7ftzs","_id":"clhitswwz00082kfw8mkkglqu"}],"Data":[],"Page":[{"title":"categories","date":"2023-05-09T08:34:57.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-05-09 16:34:57\ntype: categories\n---\n","updated":"2023-05-11T02:59:50.168Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clhitswwd00002kfwcm2ydxyh","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"tags","date":"2023-05-09T08:35:05.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-05-09 16:35:05\ntype: tags\n---\n","updated":"2023-05-11T02:59:25.168Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clhitswwn00022kfw02rh5i5t","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"link","date":"2023-05-09T08:39:53.000Z","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2023-05-09 16:39:53\n---\n","updated":"2023-05-09T08:39:53.669Z","path":"link/index.html","comments":1,"layout":"page","_id":"clhitswwo00032kfweliw22zf","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n","slug":"hello-world","published":1,"date":"2023-05-09T06:58:28.642Z","updated":"2023-05-09T09:17:10.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhitswwi00012kfw4ad68izy","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"skywalking-采样率","date":"2023-05-09T08:51:40.000Z","_content":"思路： 设置默认样本数(NUMBER_OF_SAMPLES=1000), 这里先是以1000 为采样样本总数，然后根据设置采样的采样率设置随机采样点样本，每1000次都按这个采样的样点进行采样\n\n1. 添加默认采样样本总体上变量和采样率开关变量，修改内容 SamplingService类45-47行。\n\n   ```\n   //默认采样样本总体上\n   private static final int NUMBER_OF_SAMPLES = 1000;\n   private volatile boolean proportion = false;\n   ```\n\n2. 判断配置是否开启采样率开关，修改内容 SamplingService类77-83行。\n\n   ```\n   } else if(Config.Agent.SAMPLE_N_PER_PROPORTION > 0) {\n       proportion = true;\n       this.resetProportionFactor();\n       initCollectionPoints();\n       logger.debug(\n               \"Agent sampling mechanism started. Sample {} traces in 3 seconds.\", Config.Agent.SAMPLE_N_PER_PROPORTION);\n   }\n   ```\n\n3. 判断是否采样方法添加采样率判断方法，修改内容 SamplingService类108-118行。\n\n   ```\n   }else if (proportion) {\n       int factor = samplingFactorHolder.get();\n       if(map.get(factor)) {\n           return samplingFactorHolder.compareAndSet(factor, factor + 1);\n       }\n       //判断是否已经次数已经超过样本数，如果是重置采样次数（采样次数并非样本单位数）\n       if(factor==NUMBER_OF_SAMPLES) {\n           resetProportionFactor();\n       }\n   }\n   ```\n\n\n\n4. 添加重置样本采样次数方法，修改类 SamplingService类135-137行\n\n   ```\n   private void resetProportionFactor() {\n       samplingFactorHolder = new AtomicInteger(0);\n   }\n   ```\n\n   \n\n5. 添加初始化样本单位数的采集点\n\n   ```\n   public void initCollectionPoints(){\n       map = new HashMap<>();\n       int count=0;\n       int[] result = new int[Config.Agent.SAMPLE_N_PER_PROPORTION];\n       while (count< Config.Agent.SAMPLE_N_PER_PROPORTION) {\n           int num = (int) (Math.random() * (NUMBER_OF_SAMPLES-1))+1;\n           boolean flag =true;\n           for (int index= 0; index < Config.Agent.SAMPLE_N_PER_PROPORTION; index++) {\n               if(num == result[index]){\n                   flag=false;\n                   break;\n               }\n           }\n           if(flag){\n               map.put(count, true);\n               count++;\n           }\n       }\n   }\n   ```\n\n\n\n### SamplingService.java \n\n```java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage org.apache.skywalking.apm.agent.core.sampling;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.*;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport org.apache.skywalking.apm.agent.core.boot.BootService;\nimport org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\nimport org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\nimport org.apache.skywalking.apm.agent.core.conf.Config;\nimport org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\nimport org.apache.skywalking.apm.agent.core.logging.api.ILog;\nimport org.apache.skywalking.apm.agent.core.logging.api.LogManager;\nimport org.apache.skywalking.apm.util.RunnableWithExceptionProtection;\n\n/**\n * The <code>SamplingService</code> take charge of how to sample the {@link TraceSegment}. Every {@link TraceSegment}s\n * have been traced, but, considering CPU cost of serialization/deserialization, and network bandwidth, the agent do NOT\n * send all of them to collector, if SAMPLING is on.\n * <p>\n * By default, SAMPLING is on, and  {@link Config.Agent#SAMPLE_N_PER_3_SECS }\n */\n@DefaultImplementor\npublic class SamplingService implements BootService {\n    private static final ILog logger = LogManager.getLogger(SamplingService.class);\n    //默认采样样本总体上\n    private static final int NUMBER_OF_SAMPLES = 1000;\n    private volatile boolean per3secs = false;\n    private volatile boolean proportion = false;\n    private volatile AtomicInteger samplingFactorHolder;\n    private volatile Map<Integer, Boolean> map = new HashMap<>();\n    private volatile ScheduledFuture<?> scheduledFuture;\n\n    @Override\n    public void prepare() {\n\n    }\n\n    @Override\n    public void boot() {\n        if (scheduledFuture != null) {\n            /*\n             * If {@link #boot()} invokes twice, mostly in test cases,\n             * cancel the old one.\n             */\n            scheduledFuture.cancel(true);\n        }\n        if (Config.Agent.SAMPLE_N_PER_3_SECS > 0) {\n            per3secs = true;\n            this.resetSamplingFactor();\n            ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor(\n                new DefaultNamedThreadFactory(\"SamplingService\"));\n            scheduledFuture = service.scheduleAtFixedRate(new RunnableWithExceptionProtection(\n                this::resetSamplingFactor, t -> logger.error(\"unexpected exception.\", t)), 0, 3, TimeUnit.SECONDS);\n            logger.debug(\n                \"Agent sampling mechanism started. Sample {} traces in 3 seconds.\", Config.Agent.SAMPLE_N_PER_3_SECS);\n        } else if(Config.Agent.SAMPLE_N_PER_PROPORTION > 0) {\n            proportion = true;\n            this.resetProportionFactor();\n            initCollectionPoints();\n            logger.debug(\n                    \"Agent sampling mechanism started. Sample {} traces in 3 seconds.\", Config.Agent.SAMPLE_N_PER_PROPORTION);\n        }\n    }\n\n    @Override\n    public void onComplete() {\n\n    }\n\n    @Override\n    public void shutdown() {\n        if (scheduledFuture != null) {\n            scheduledFuture.cancel(true);\n        }\n    }\n\n    /**\n     * @return true, if sampling mechanism is on, and getDefault the sampling factor successfully.\n     */\n    public boolean trySampling() {\n        if (per3secs) {\n            int factor = samplingFactorHolder.get();\n            if (factor < Config.Agent.SAMPLE_N_PER_3_SECS) {\n                return samplingFactorHolder.compareAndSet(factor, factor + 1);\n            } else {\n                return false;\n            }\n        }else if (proportion) {\n            int factor = samplingFactorHolder.get();\n            if(map.get(factor)) {\n                return samplingFactorHolder.compareAndSet(factor, factor + 1);\n            }\n            //判断是否已经次数已经超过样本数，如果是重置采样次数（采样次数并非样本单位数）\n            if(factor==NUMBER_OF_SAMPLES) {\n                resetProportionFactor();\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Increase the sampling factor by force, to avoid sampling too many traces. If many distributed traces require\n     * sampled, the trace beginning at local, has less chance to be sampled.\n     */\n    public void forceSampled() {\n        if (per3secs||proportion) {\n            samplingFactorHolder.incrementAndGet();\n        }\n    }\n\n    private void resetSamplingFactor() {\n        samplingFactorHolder = new AtomicInteger(0);\n    }\n    private void resetProportionFactor() {\n        samplingFactorHolder = new AtomicInteger(0);\n    }\n\n    /**\n     * 初始化样本单位数的采集点\n     */\n    public void initCollectionPoints(){\n        map = new HashMap<>();\n        int count=0;\n        int[] result = new int[Config.Agent.SAMPLE_N_PER_PROPORTION];\n        while (count< Config.Agent.SAMPLE_N_PER_PROPORTION) {\n            int num = (int) (Math.random() * (NUMBER_OF_SAMPLES-1))+1;\n            boolean flag =true;\n            for (int index= 0; index < Config.Agent.SAMPLE_N_PER_PROPORTION; index++) {\n                if(num == result[index]){\n                    flag=false;\n                    break;\n                }\n            }\n            if(flag){\n                map.put(count, true);\n                count++;\n            }\n        }\n    }\n\n\n}\n\n```\n\n\n\n### skywalking 调用链开关设置 \n\n思路：在jvm环境变量设置是否开启调用链开关，然后在其代码增强地方加if-else判断。\n\n1. 修改内容 InstMethodsInter类77-89行 \n\n   ```java\n   //回去jvm 环境变量值sw-collection,并设置默认值为1\n   String swCollection = System.getProperty(\"sw-collection\", \"1\");\n   logger.info(\"skyWalking-enabled  [{}].\", swCollection);\n   try {\n       //判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过\n       if(swCollection.equals(\"1\"))    {\n           logger.info(\"skyWalking interceptor beforeMethod\");\n           interceptor.beforeMethod(targetObject, method, allArguments, method.getParameterTypes(), result);\n       }else {\n           logger.info(\"skyWalking not interceptor beforeMethod\");\n       }\n   } catch (Throwable t) {\n       logger.error(t, \"class[{}] before method[{}] intercept failure\", obj.getClass(), method.getName());\n   }\n   ```\n\n   \n\n2. 添加方法调用后置处理内容 InstMethodsInter类107-113行\n\n   \n\n   ```java\n   try {\n       //判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过\n       if(swCollection.equals(\"1\")) {\n           ret = interceptor.afterMethod(targetObject, method, allArguments, method.getParameterTypes(), ret);\n       }\n   } catch (Throwable t) {\n       logger.error(t, \"class[{}] after method[{}] intercept failure\", obj.getClass(), method.getName());\n   }\n   ```\n\n\n\n\n\n\n\n### InstMethodsInter.java\n\n```java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance;\n\nimport java.lang.reflect.Method;\nimport java.util.concurrent.Callable;\nimport net.bytebuddy.implementation.bind.annotation.AllArguments;\nimport net.bytebuddy.implementation.bind.annotation.Origin;\nimport net.bytebuddy.implementation.bind.annotation.RuntimeType;\nimport net.bytebuddy.implementation.bind.annotation.SuperCall;\nimport net.bytebuddy.implementation.bind.annotation.This;\nimport org.apache.skywalking.apm.agent.core.logging.api.LogManager;\nimport org.apache.skywalking.apm.agent.core.plugin.PluginException;\nimport org.apache.skywalking.apm.agent.core.plugin.loader.InterceptorInstanceLoader;\nimport org.apache.skywalking.apm.agent.core.logging.api.ILog;\nimport org.apache.skywalking.apm.util.StringUtil;\n\n/**\n * The actual byte-buddy's interceptor to intercept class instance methods. In this class, it provide a bridge between\n * byte-buddy and sky-walking plugin.\n */\npublic class InstMethodsInter {\n    private static final ILog logger = LogManager.getLogger(InstMethodsInter.class);\n\n    /**\n     * An {@link InstanceMethodsAroundInterceptor} This name should only stay in {@link String}, the real {@link Class}\n     * type will trigger classloader failure. If you want to know more, please check on books about Classloader or\n     * Classloader appointment mechanism.\n     */\n    private InstanceMethodsAroundInterceptor interceptor;\n\n    /**\n     * @param instanceMethodsAroundInterceptorClassName class full name.\n     */\n    public InstMethodsInter(String instanceMethodsAroundInterceptorClassName, ClassLoader classLoader) {\n        try {\n            interceptor = InterceptorInstanceLoader.load(instanceMethodsAroundInterceptorClassName, classLoader);\n        } catch (Throwable t) {\n            throw new PluginException(\"Can't create InstanceMethodsAroundInterceptor.\", t);\n        }\n    }\n\n    /**\n     * Intercept the target instance method.\n     *\n     * @param obj          target class instance.\n     * @param allArguments all method arguments\n     * @param method       method description.\n     * @param zuper        the origin call ref.\n     * @return the return value of target instance method.\n     * @throws Exception only throw exception because of zuper.call() or unexpected exception in sky-walking ( This is a\n     *                   bug, if anything triggers this condition ).\n     */\n    @RuntimeType\n    public Object intercept(@This Object obj, @AllArguments Object[] allArguments, @SuperCall Callable<?> zuper,\n        @Origin Method method) throws Throwable {\n        EnhancedInstance targetObject = (EnhancedInstance) obj;\n\n        MethodInterceptResult result = new MethodInterceptResult();\n        //回去jvm 环境变量值sw-collection,并设置默认值为1\n        String swCollection = System.getProperty(\"sw-collection\", \"1\");\n        logger.info(\"skyWalking-enabled  [{}].\", swCollection);\n        try {\n            //判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过\n            if(swCollection.equals(\"1\"))    {\n                logger.info(\"skyWalking interceptor beforeMethod\");\n                interceptor.beforeMethod(targetObject, method, allArguments, method.getParameterTypes(), result);\n            }else {\n                logger.info(\"skyWalking not interceptor beforeMethod\");\n            }\n        } catch (Throwable t) {\n            logger.error(t, \"class[{}] before method[{}] intercept failure\", obj.getClass(), method.getName());\n        }\n\n        Object ret = null;\n        try {\n            if (!result.isContinue()) {\n                ret = result._ret();\n            } else {\n                ret = zuper.call();\n            }\n        } catch (Throwable t) {\n            try {\n                interceptor.handleMethodException(targetObject, method, allArguments, method.getParameterTypes(), t);\n            } catch (Throwable t2) {\n                logger.error(t2, \"class[{}] handle method[{}] exception failure\", obj.getClass(), method.getName());\n            }\n            throw t;\n        } finally {\n            try {\n                //判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过\n                if(swCollection.equals(\"1\")) {\n                    ret = interceptor.afterMethod(targetObject, method, allArguments, method.getParameterTypes(), ret);\n                }\n            } catch (Throwable t) {\n                logger.error(t, \"class[{}] after method[{}] intercept failure\", obj.getClass(), method.getName());\n            }\n        }\n        return ret;\n    }\n\n\n\n}\n\n```\n\n\n\n\n\n### 动态配置使用说明 \n\n#### 动态开关\n\n 设置jvm变量 sw-collection 变量值 0：关闭，1：开启（默认值为0），使用方法在启动-Dsw-collection=0\n\n如果在运行中需要变更采样开关 调用 System.setProperty(“sw-collection”, “0”) 方法设置调用链开关;\n\n#### 采样率设置\n\n 设置jvm变量sample-per-proportion 变量值为1-100整数，使用方法在启动-Dsample-per-proportion =60，\n\n如果在运行中需要变更采样开关 调用 System.setProperty(“sample-per-proportion ”, “50”) 方法设置调用链开关;\n\n\n\n​\t","source":"_posts/skywalking-采样率.md","raw":"---\ntitle: skywalking-采样率\ndate: 2023-05-09 16:51:40\ncategories: [学习笔记, 链路追踪]\ntags:\n\t- java\n\t- skywalking\n---\n思路： 设置默认样本数(NUMBER_OF_SAMPLES=1000), 这里先是以1000 为采样样本总数，然后根据设置采样的采样率设置随机采样点样本，每1000次都按这个采样的样点进行采样\n\n1. 添加默认采样样本总体上变量和采样率开关变量，修改内容 SamplingService类45-47行。\n\n   ```\n   //默认采样样本总体上\n   private static final int NUMBER_OF_SAMPLES = 1000;\n   private volatile boolean proportion = false;\n   ```\n\n2. 判断配置是否开启采样率开关，修改内容 SamplingService类77-83行。\n\n   ```\n   } else if(Config.Agent.SAMPLE_N_PER_PROPORTION > 0) {\n       proportion = true;\n       this.resetProportionFactor();\n       initCollectionPoints();\n       logger.debug(\n               \"Agent sampling mechanism started. Sample {} traces in 3 seconds.\", Config.Agent.SAMPLE_N_PER_PROPORTION);\n   }\n   ```\n\n3. 判断是否采样方法添加采样率判断方法，修改内容 SamplingService类108-118行。\n\n   ```\n   }else if (proportion) {\n       int factor = samplingFactorHolder.get();\n       if(map.get(factor)) {\n           return samplingFactorHolder.compareAndSet(factor, factor + 1);\n       }\n       //判断是否已经次数已经超过样本数，如果是重置采样次数（采样次数并非样本单位数）\n       if(factor==NUMBER_OF_SAMPLES) {\n           resetProportionFactor();\n       }\n   }\n   ```\n\n\n\n4. 添加重置样本采样次数方法，修改类 SamplingService类135-137行\n\n   ```\n   private void resetProportionFactor() {\n       samplingFactorHolder = new AtomicInteger(0);\n   }\n   ```\n\n   \n\n5. 添加初始化样本单位数的采集点\n\n   ```\n   public void initCollectionPoints(){\n       map = new HashMap<>();\n       int count=0;\n       int[] result = new int[Config.Agent.SAMPLE_N_PER_PROPORTION];\n       while (count< Config.Agent.SAMPLE_N_PER_PROPORTION) {\n           int num = (int) (Math.random() * (NUMBER_OF_SAMPLES-1))+1;\n           boolean flag =true;\n           for (int index= 0; index < Config.Agent.SAMPLE_N_PER_PROPORTION; index++) {\n               if(num == result[index]){\n                   flag=false;\n                   break;\n               }\n           }\n           if(flag){\n               map.put(count, true);\n               count++;\n           }\n       }\n   }\n   ```\n\n\n\n### SamplingService.java \n\n```java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage org.apache.skywalking.apm.agent.core.sampling;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.*;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport org.apache.skywalking.apm.agent.core.boot.BootService;\nimport org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\nimport org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\nimport org.apache.skywalking.apm.agent.core.conf.Config;\nimport org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\nimport org.apache.skywalking.apm.agent.core.logging.api.ILog;\nimport org.apache.skywalking.apm.agent.core.logging.api.LogManager;\nimport org.apache.skywalking.apm.util.RunnableWithExceptionProtection;\n\n/**\n * The <code>SamplingService</code> take charge of how to sample the {@link TraceSegment}. Every {@link TraceSegment}s\n * have been traced, but, considering CPU cost of serialization/deserialization, and network bandwidth, the agent do NOT\n * send all of them to collector, if SAMPLING is on.\n * <p>\n * By default, SAMPLING is on, and  {@link Config.Agent#SAMPLE_N_PER_3_SECS }\n */\n@DefaultImplementor\npublic class SamplingService implements BootService {\n    private static final ILog logger = LogManager.getLogger(SamplingService.class);\n    //默认采样样本总体上\n    private static final int NUMBER_OF_SAMPLES = 1000;\n    private volatile boolean per3secs = false;\n    private volatile boolean proportion = false;\n    private volatile AtomicInteger samplingFactorHolder;\n    private volatile Map<Integer, Boolean> map = new HashMap<>();\n    private volatile ScheduledFuture<?> scheduledFuture;\n\n    @Override\n    public void prepare() {\n\n    }\n\n    @Override\n    public void boot() {\n        if (scheduledFuture != null) {\n            /*\n             * If {@link #boot()} invokes twice, mostly in test cases,\n             * cancel the old one.\n             */\n            scheduledFuture.cancel(true);\n        }\n        if (Config.Agent.SAMPLE_N_PER_3_SECS > 0) {\n            per3secs = true;\n            this.resetSamplingFactor();\n            ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor(\n                new DefaultNamedThreadFactory(\"SamplingService\"));\n            scheduledFuture = service.scheduleAtFixedRate(new RunnableWithExceptionProtection(\n                this::resetSamplingFactor, t -> logger.error(\"unexpected exception.\", t)), 0, 3, TimeUnit.SECONDS);\n            logger.debug(\n                \"Agent sampling mechanism started. Sample {} traces in 3 seconds.\", Config.Agent.SAMPLE_N_PER_3_SECS);\n        } else if(Config.Agent.SAMPLE_N_PER_PROPORTION > 0) {\n            proportion = true;\n            this.resetProportionFactor();\n            initCollectionPoints();\n            logger.debug(\n                    \"Agent sampling mechanism started. Sample {} traces in 3 seconds.\", Config.Agent.SAMPLE_N_PER_PROPORTION);\n        }\n    }\n\n    @Override\n    public void onComplete() {\n\n    }\n\n    @Override\n    public void shutdown() {\n        if (scheduledFuture != null) {\n            scheduledFuture.cancel(true);\n        }\n    }\n\n    /**\n     * @return true, if sampling mechanism is on, and getDefault the sampling factor successfully.\n     */\n    public boolean trySampling() {\n        if (per3secs) {\n            int factor = samplingFactorHolder.get();\n            if (factor < Config.Agent.SAMPLE_N_PER_3_SECS) {\n                return samplingFactorHolder.compareAndSet(factor, factor + 1);\n            } else {\n                return false;\n            }\n        }else if (proportion) {\n            int factor = samplingFactorHolder.get();\n            if(map.get(factor)) {\n                return samplingFactorHolder.compareAndSet(factor, factor + 1);\n            }\n            //判断是否已经次数已经超过样本数，如果是重置采样次数（采样次数并非样本单位数）\n            if(factor==NUMBER_OF_SAMPLES) {\n                resetProportionFactor();\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Increase the sampling factor by force, to avoid sampling too many traces. If many distributed traces require\n     * sampled, the trace beginning at local, has less chance to be sampled.\n     */\n    public void forceSampled() {\n        if (per3secs||proportion) {\n            samplingFactorHolder.incrementAndGet();\n        }\n    }\n\n    private void resetSamplingFactor() {\n        samplingFactorHolder = new AtomicInteger(0);\n    }\n    private void resetProportionFactor() {\n        samplingFactorHolder = new AtomicInteger(0);\n    }\n\n    /**\n     * 初始化样本单位数的采集点\n     */\n    public void initCollectionPoints(){\n        map = new HashMap<>();\n        int count=0;\n        int[] result = new int[Config.Agent.SAMPLE_N_PER_PROPORTION];\n        while (count< Config.Agent.SAMPLE_N_PER_PROPORTION) {\n            int num = (int) (Math.random() * (NUMBER_OF_SAMPLES-1))+1;\n            boolean flag =true;\n            for (int index= 0; index < Config.Agent.SAMPLE_N_PER_PROPORTION; index++) {\n                if(num == result[index]){\n                    flag=false;\n                    break;\n                }\n            }\n            if(flag){\n                map.put(count, true);\n                count++;\n            }\n        }\n    }\n\n\n}\n\n```\n\n\n\n### skywalking 调用链开关设置 \n\n思路：在jvm环境变量设置是否开启调用链开关，然后在其代码增强地方加if-else判断。\n\n1. 修改内容 InstMethodsInter类77-89行 \n\n   ```java\n   //回去jvm 环境变量值sw-collection,并设置默认值为1\n   String swCollection = System.getProperty(\"sw-collection\", \"1\");\n   logger.info(\"skyWalking-enabled  [{}].\", swCollection);\n   try {\n       //判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过\n       if(swCollection.equals(\"1\"))    {\n           logger.info(\"skyWalking interceptor beforeMethod\");\n           interceptor.beforeMethod(targetObject, method, allArguments, method.getParameterTypes(), result);\n       }else {\n           logger.info(\"skyWalking not interceptor beforeMethod\");\n       }\n   } catch (Throwable t) {\n       logger.error(t, \"class[{}] before method[{}] intercept failure\", obj.getClass(), method.getName());\n   }\n   ```\n\n   \n\n2. 添加方法调用后置处理内容 InstMethodsInter类107-113行\n\n   \n\n   ```java\n   try {\n       //判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过\n       if(swCollection.equals(\"1\")) {\n           ret = interceptor.afterMethod(targetObject, method, allArguments, method.getParameterTypes(), ret);\n       }\n   } catch (Throwable t) {\n       logger.error(t, \"class[{}] after method[{}] intercept failure\", obj.getClass(), method.getName());\n   }\n   ```\n\n\n\n\n\n\n\n### InstMethodsInter.java\n\n```java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance;\n\nimport java.lang.reflect.Method;\nimport java.util.concurrent.Callable;\nimport net.bytebuddy.implementation.bind.annotation.AllArguments;\nimport net.bytebuddy.implementation.bind.annotation.Origin;\nimport net.bytebuddy.implementation.bind.annotation.RuntimeType;\nimport net.bytebuddy.implementation.bind.annotation.SuperCall;\nimport net.bytebuddy.implementation.bind.annotation.This;\nimport org.apache.skywalking.apm.agent.core.logging.api.LogManager;\nimport org.apache.skywalking.apm.agent.core.plugin.PluginException;\nimport org.apache.skywalking.apm.agent.core.plugin.loader.InterceptorInstanceLoader;\nimport org.apache.skywalking.apm.agent.core.logging.api.ILog;\nimport org.apache.skywalking.apm.util.StringUtil;\n\n/**\n * The actual byte-buddy's interceptor to intercept class instance methods. In this class, it provide a bridge between\n * byte-buddy and sky-walking plugin.\n */\npublic class InstMethodsInter {\n    private static final ILog logger = LogManager.getLogger(InstMethodsInter.class);\n\n    /**\n     * An {@link InstanceMethodsAroundInterceptor} This name should only stay in {@link String}, the real {@link Class}\n     * type will trigger classloader failure. If you want to know more, please check on books about Classloader or\n     * Classloader appointment mechanism.\n     */\n    private InstanceMethodsAroundInterceptor interceptor;\n\n    /**\n     * @param instanceMethodsAroundInterceptorClassName class full name.\n     */\n    public InstMethodsInter(String instanceMethodsAroundInterceptorClassName, ClassLoader classLoader) {\n        try {\n            interceptor = InterceptorInstanceLoader.load(instanceMethodsAroundInterceptorClassName, classLoader);\n        } catch (Throwable t) {\n            throw new PluginException(\"Can't create InstanceMethodsAroundInterceptor.\", t);\n        }\n    }\n\n    /**\n     * Intercept the target instance method.\n     *\n     * @param obj          target class instance.\n     * @param allArguments all method arguments\n     * @param method       method description.\n     * @param zuper        the origin call ref.\n     * @return the return value of target instance method.\n     * @throws Exception only throw exception because of zuper.call() or unexpected exception in sky-walking ( This is a\n     *                   bug, if anything triggers this condition ).\n     */\n    @RuntimeType\n    public Object intercept(@This Object obj, @AllArguments Object[] allArguments, @SuperCall Callable<?> zuper,\n        @Origin Method method) throws Throwable {\n        EnhancedInstance targetObject = (EnhancedInstance) obj;\n\n        MethodInterceptResult result = new MethodInterceptResult();\n        //回去jvm 环境变量值sw-collection,并设置默认值为1\n        String swCollection = System.getProperty(\"sw-collection\", \"1\");\n        logger.info(\"skyWalking-enabled  [{}].\", swCollection);\n        try {\n            //判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过\n            if(swCollection.equals(\"1\"))    {\n                logger.info(\"skyWalking interceptor beforeMethod\");\n                interceptor.beforeMethod(targetObject, method, allArguments, method.getParameterTypes(), result);\n            }else {\n                logger.info(\"skyWalking not interceptor beforeMethod\");\n            }\n        } catch (Throwable t) {\n            logger.error(t, \"class[{}] before method[{}] intercept failure\", obj.getClass(), method.getName());\n        }\n\n        Object ret = null;\n        try {\n            if (!result.isContinue()) {\n                ret = result._ret();\n            } else {\n                ret = zuper.call();\n            }\n        } catch (Throwable t) {\n            try {\n                interceptor.handleMethodException(targetObject, method, allArguments, method.getParameterTypes(), t);\n            } catch (Throwable t2) {\n                logger.error(t2, \"class[{}] handle method[{}] exception failure\", obj.getClass(), method.getName());\n            }\n            throw t;\n        } finally {\n            try {\n                //判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过\n                if(swCollection.equals(\"1\")) {\n                    ret = interceptor.afterMethod(targetObject, method, allArguments, method.getParameterTypes(), ret);\n                }\n            } catch (Throwable t) {\n                logger.error(t, \"class[{}] after method[{}] intercept failure\", obj.getClass(), method.getName());\n            }\n        }\n        return ret;\n    }\n\n\n\n}\n\n```\n\n\n\n\n\n### 动态配置使用说明 \n\n#### 动态开关\n\n 设置jvm变量 sw-collection 变量值 0：关闭，1：开启（默认值为0），使用方法在启动-Dsw-collection=0\n\n如果在运行中需要变更采样开关 调用 System.setProperty(“sw-collection”, “0”) 方法设置调用链开关;\n\n#### 采样率设置\n\n 设置jvm变量sample-per-proportion 变量值为1-100整数，使用方法在启动-Dsample-per-proportion =60，\n\n如果在运行中需要变更采样开关 调用 System.setProperty(“sample-per-proportion ”, “50”) 方法设置调用链开关;\n\n\n\n​\t","slug":"skywalking-采样率","published":1,"updated":"2023-05-11T03:06:30.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhitswwr00042kfw1c75ex0y","content":"<p>思路： 设置默认样本数(NUMBER_OF_SAMPLES&#x3D;1000), 这里先是以1000 为采样样本总数，然后根据设置采样的采样率设置随机采样点样本，每1000次都按这个采样的样点进行采样</p>\n<ol>\n<li><p>添加默认采样样本总体上变量和采样率开关变量，修改内容 SamplingService类45-47行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//默认采样样本总体上</span><br><span class=\"line\">private static final int NUMBER_OF_SAMPLES = 1000;</span><br><span class=\"line\">private volatile boolean proportion = false;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断配置是否开启采样率开关，修改内容 SamplingService类77-83行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; else if(Config.Agent.SAMPLE_N_PER_PROPORTION &gt; 0) &#123;</span><br><span class=\"line\">    proportion = true;</span><br><span class=\"line\">    this.resetProportionFactor();</span><br><span class=\"line\">    initCollectionPoints();</span><br><span class=\"line\">    logger.debug(</span><br><span class=\"line\">            &quot;Agent sampling mechanism started. Sample &#123;&#125; traces in 3 seconds.&quot;, Config.Agent.SAMPLE_N_PER_PROPORTION);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断是否采样方法添加采样率判断方法，修改内容 SamplingService类108-118行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;else if (proportion) &#123;</span><br><span class=\"line\">    int factor = samplingFactorHolder.get();</span><br><span class=\"line\">    if(map.get(factor)) &#123;</span><br><span class=\"line\">        return samplingFactorHolder.compareAndSet(factor, factor + 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //判断是否已经次数已经超过样本数，如果是重置采样次数（采样次数并非样本单位数）</span><br><span class=\"line\">    if(factor==NUMBER_OF_SAMPLES) &#123;</span><br><span class=\"line\">        resetProportionFactor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>添加重置样本采样次数方法，修改类 SamplingService类135-137行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void resetProportionFactor() &#123;</span><br><span class=\"line\">    samplingFactorHolder = new AtomicInteger(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>添加初始化样本单位数的采集点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void initCollectionPoints()&#123;</span><br><span class=\"line\">    map = new HashMap&lt;&gt;();</span><br><span class=\"line\">    int count=0;</span><br><span class=\"line\">    int[] result = new int[Config.Agent.SAMPLE_N_PER_PROPORTION];</span><br><span class=\"line\">    while (count&lt; Config.Agent.SAMPLE_N_PER_PROPORTION) &#123;</span><br><span class=\"line\">        int num = (int) (Math.random() * (NUMBER_OF_SAMPLES-1))+1;</span><br><span class=\"line\">        boolean flag =true;</span><br><span class=\"line\">        for (int index= 0; index &lt; Config.Agent.SAMPLE_N_PER_PROPORTION; index++) &#123;</span><br><span class=\"line\">            if(num == result[index])&#123;</span><br><span class=\"line\">                flag=false;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(flag)&#123;</span><br><span class=\"line\">            map.put(count, true);</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"SamplingService-java\"><a href=\"#SamplingService-java\" class=\"headerlink\" title=\"SamplingService.java\"></a>SamplingService.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class=\"line\"><span class=\"comment\"> * contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class=\"line\"><span class=\"comment\"> * this work for additional information regarding copyright ownership.</span></span><br><span class=\"line\"><span class=\"comment\"> * The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class=\"line\"><span class=\"comment\"> * (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class=\"line\"><span class=\"comment\"> * the License.  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.apache.skywalking.apm.agent.core.sampling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.boot.BootService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.conf.Config;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.logging.api.ILog;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.logging.api.LogManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.util.RunnableWithExceptionProtection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The &lt;code&gt;SamplingService&lt;/code&gt; take charge of how to sample the &#123;<span class=\"doctag\">@link</span> TraceSegment&#125;. Every &#123;<span class=\"doctag\">@link</span> TraceSegment&#125;s</span></span><br><span class=\"line\"><span class=\"comment\"> * have been traced, but, considering CPU cost of serialization/deserialization, and network bandwidth, the agent do NOT</span></span><br><span class=\"line\"><span class=\"comment\"> * send all of them to collector, if SAMPLING is on.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * By default, SAMPLING is on, and  &#123;<span class=\"doctag\">@link</span> Config.Agent#SAMPLE_N_PER_3_SECS &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@DefaultImplementor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SamplingService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BootService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">ILog</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LogManager.getLogger(SamplingService.class);</span><br><span class=\"line\">    <span class=\"comment\">//默认采样样本总体上</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">NUMBER_OF_SAMPLES</span> <span class=\"operator\">=</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">boolean</span> <span class=\"variable\">per3secs</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">boolean</span> <span class=\"variable\">proportion</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> AtomicInteger samplingFactorHolder;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Map&lt;Integer, Boolean&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> ScheduledFuture&lt;?&gt; scheduledFuture;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">prepare</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">boot</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scheduledFuture != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * If &#123;@link #boot()&#125; invokes twice, mostly in test cases,</span></span><br><span class=\"line\"><span class=\"comment\">             * cancel the old one.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            scheduledFuture.cancel(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Config.Agent.SAMPLE_N_PER_3_SECS &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            per3secs = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.resetSamplingFactor();</span><br><span class=\"line\">            <span class=\"type\">ScheduledExecutorService</span> <span class=\"variable\">service</span> <span class=\"operator\">=</span> Executors.newSingleThreadScheduledExecutor(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultNamedThreadFactory</span>(<span class=\"string\">&quot;SamplingService&quot;</span>));</span><br><span class=\"line\">            scheduledFuture = service.scheduleAtFixedRate(<span class=\"keyword\">new</span> <span class=\"title class_\">RunnableWithExceptionProtection</span>(</span><br><span class=\"line\">                <span class=\"built_in\">this</span>::resetSamplingFactor, t -&gt; logger.error(<span class=\"string\">&quot;unexpected exception.&quot;</span>, t)), <span class=\"number\">0</span>, <span class=\"number\">3</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">            logger.debug(</span><br><span class=\"line\">                <span class=\"string\">&quot;Agent sampling mechanism started. Sample &#123;&#125; traces in 3 seconds.&quot;</span>, Config.Agent.SAMPLE_N_PER_3_SECS);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(Config.Agent.SAMPLE_N_PER_PROPORTION &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            proportion = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.resetProportionFactor();</span><br><span class=\"line\">            initCollectionPoints();</span><br><span class=\"line\">            logger.debug(</span><br><span class=\"line\">                    <span class=\"string\">&quot;Agent sampling mechanism started. Sample &#123;&#125; traces in 3 seconds.&quot;</span>, Config.Agent.SAMPLE_N_PER_PROPORTION);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onComplete</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shutdown</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scheduledFuture != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            scheduledFuture.cancel(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true, if sampling mechanism is on, and getDefault the sampling factor successfully.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">trySampling</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (per3secs) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">factor</span> <span class=\"operator\">=</span> samplingFactorHolder.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (factor &lt; Config.Agent.SAMPLE_N_PER_3_SECS) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> samplingFactorHolder.compareAndSet(factor, factor + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (proportion) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">factor</span> <span class=\"operator\">=</span> samplingFactorHolder.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.get(factor)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> samplingFactorHolder.compareAndSet(factor, factor + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//判断是否已经次数已经超过样本数，如果是重置采样次数（采样次数并非样本单位数）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(factor==NUMBER_OF_SAMPLES) &#123;</span><br><span class=\"line\">                resetProportionFactor();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Increase the sampling factor by force, to avoid sampling too many traces. If many distributed traces require</span></span><br><span class=\"line\"><span class=\"comment\">     * sampled, the trace beginning at local, has less chance to be sampled.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">forceSampled</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (per3secs||proportion) &#123;</span><br><span class=\"line\">            samplingFactorHolder.incrementAndGet();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">resetSamplingFactor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        samplingFactorHolder = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">resetProportionFactor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        samplingFactorHolder = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化样本单位数的采集点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initCollectionPoints</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[Config.Agent.SAMPLE_N_PER_PROPORTION];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count&lt; Config.Agent.SAMPLE_N_PER_PROPORTION) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) (Math.random() * (NUMBER_OF_SAMPLES-<span class=\"number\">1</span>))+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> index= <span class=\"number\">0</span>; index &lt; Config.Agent.SAMPLE_N_PER_PROPORTION; index++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(num == result[index])&#123;</span><br><span class=\"line\">                    flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">                map.put(count, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"skywalking-调用链开关设置\"><a href=\"#skywalking-调用链开关设置\" class=\"headerlink\" title=\"skywalking 调用链开关设置\"></a>skywalking 调用链开关设置</h3><p>思路：在jvm环境变量设置是否开启调用链开关，然后在其代码增强地方加if-else判断。</p>\n<ol>\n<li><p>修改内容 InstMethodsInter类77-89行 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//回去jvm 环境变量值sw-collection,并设置默认值为1</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">swCollection</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;sw-collection&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">logger.info(<span class=\"string\">&quot;skyWalking-enabled  [&#123;&#125;].&quot;</span>, swCollection);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(swCollection.equals(<span class=\"string\">&quot;1&quot;</span>))    &#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;skyWalking interceptor beforeMethod&quot;</span>);</span><br><span class=\"line\">        interceptor.beforeMethod(targetObject, method, allArguments, method.getParameterTypes(), result);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;skyWalking not interceptor beforeMethod&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">    logger.error(t, <span class=\"string\">&quot;class[&#123;&#125;] before method[&#123;&#125;] intercept failure&quot;</span>, obj.getClass(), method.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>添加方法调用后置处理内容 InstMethodsInter类107-113行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(swCollection.equals(<span class=\"string\">&quot;1&quot;</span>)) &#123;</span><br><span class=\"line\">        ret = interceptor.afterMethod(targetObject, method, allArguments, method.getParameterTypes(), ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">    logger.error(t, <span class=\"string\">&quot;class[&#123;&#125;] after method[&#123;&#125;] intercept failure&quot;</span>, obj.getClass(), method.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"InstMethodsInter-java\"><a href=\"#InstMethodsInter-java\" class=\"headerlink\" title=\"InstMethodsInter.java\"></a>InstMethodsInter.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class=\"line\"><span class=\"comment\"> * contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class=\"line\"><span class=\"comment\"> * this work for additional information regarding copyright ownership.</span></span><br><span class=\"line\"><span class=\"comment\"> * The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class=\"line\"><span class=\"comment\"> * (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class=\"line\"><span class=\"comment\"> * the License.  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.bytebuddy.implementation.bind.annotation.AllArguments;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.bytebuddy.implementation.bind.annotation.Origin;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.bytebuddy.implementation.bind.annotation.RuntimeType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.bytebuddy.implementation.bind.annotation.SuperCall;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.bytebuddy.implementation.bind.annotation.This;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.logging.api.LogManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.plugin.PluginException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.plugin.loader.InterceptorInstanceLoader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.logging.api.ILog;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.util.StringUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The actual byte-buddy&#x27;s interceptor to intercept class instance methods. In this class, it provide a bridge between</span></span><br><span class=\"line\"><span class=\"comment\"> * byte-buddy and sky-walking plugin.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InstMethodsInter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">ILog</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LogManager.getLogger(InstMethodsInter.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * An &#123;<span class=\"doctag\">@link</span> InstanceMethodsAroundInterceptor&#125; This name should only stay in &#123;<span class=\"doctag\">@link</span> String&#125;, the real &#123;<span class=\"doctag\">@link</span> Class&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * type will trigger classloader failure. If you want to know more, please check on books about Classloader or</span></span><br><span class=\"line\"><span class=\"comment\">     * Classloader appointment mechanism.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> InstanceMethodsAroundInterceptor interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> instanceMethodsAroundInterceptorClassName class full name.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">InstMethodsInter</span><span class=\"params\">(String instanceMethodsAroundInterceptorClassName, ClassLoader classLoader)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            interceptor = InterceptorInstanceLoader.load(instanceMethodsAroundInterceptorClassName, classLoader);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PluginException</span>(<span class=\"string\">&quot;Can&#x27;t create InstanceMethodsAroundInterceptor.&quot;</span>, t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Intercept the target instance method.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> obj          target class instance.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> allArguments all method arguments</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method       method description.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> zuper        the origin call ref.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the return value of target instance method.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception only throw exception because of zuper.call() or unexpected exception in sky-walking ( This is a</span></span><br><span class=\"line\"><span class=\"comment\">     *                   bug, if anything triggers this condition ).</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RuntimeType</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(<span class=\"meta\">@This</span> Object obj, <span class=\"meta\">@AllArguments</span> Object[] allArguments, <span class=\"meta\">@SuperCall</span> Callable&lt;?&gt; zuper,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"meta\">@Origin</span> Method method)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"type\">EnhancedInstance</span> <span class=\"variable\">targetObject</span> <span class=\"operator\">=</span> (EnhancedInstance) obj;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">MethodInterceptResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MethodInterceptResult</span>();</span><br><span class=\"line\">        <span class=\"comment\">//回去jvm 环境变量值sw-collection,并设置默认值为1</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">swCollection</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;sw-collection&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;skyWalking-enabled  [&#123;&#125;].&quot;</span>, swCollection);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(swCollection.equals(<span class=\"string\">&quot;1&quot;</span>))    &#123;</span><br><span class=\"line\">                logger.info(<span class=\"string\">&quot;skyWalking interceptor beforeMethod&quot;</span>);</span><br><span class=\"line\">                interceptor.beforeMethod(targetObject, method, allArguments, method.getParameterTypes(), result);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                logger.info(<span class=\"string\">&quot;skyWalking not interceptor beforeMethod&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            logger.error(t, <span class=\"string\">&quot;class[&#123;&#125;] before method[&#123;&#125;] intercept failure&quot;</span>, obj.getClass(), method.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!result.isContinue()) &#123;</span><br><span class=\"line\">                ret = result._ret();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ret = zuper.call();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                interceptor.handleMethodException(targetObject, method, allArguments, method.getParameterTypes(), t);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t2) &#123;</span><br><span class=\"line\">                logger.error(t2, <span class=\"string\">&quot;class[&#123;&#125;] handle method[&#123;&#125;] exception failure&quot;</span>, obj.getClass(), method.getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> t;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(swCollection.equals(<span class=\"string\">&quot;1&quot;</span>)) &#123;</span><br><span class=\"line\">                    ret = interceptor.afterMethod(targetObject, method, allArguments, method.getParameterTypes(), ret);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                logger.error(t, <span class=\"string\">&quot;class[&#123;&#125;] after method[&#123;&#125;] intercept failure&quot;</span>, obj.getClass(), method.getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"动态配置使用说明\"><a href=\"#动态配置使用说明\" class=\"headerlink\" title=\"动态配置使用说明\"></a>动态配置使用说明</h3><h4 id=\"动态开关\"><a href=\"#动态开关\" class=\"headerlink\" title=\"动态开关\"></a>动态开关</h4><p> 设置jvm变量 sw-collection 变量值 0：关闭，1：开启（默认值为0），使用方法在启动-Dsw-collection&#x3D;0</p>\n<p>如果在运行中需要变更采样开关 调用 System.setProperty(“sw-collection”, “0”) 方法设置调用链开关;</p>\n<h4 id=\"采样率设置\"><a href=\"#采样率设置\" class=\"headerlink\" title=\"采样率设置\"></a>采样率设置</h4><p> 设置jvm变量sample-per-proportion 变量值为1-100整数，使用方法在启动-Dsample-per-proportion &#x3D;60，</p>\n<p>如果在运行中需要变更采样开关 调用 System.setProperty(“sample-per-proportion ”, “50”) 方法设置调用链开关;</p>\n<p>​\t</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>思路： 设置默认样本数(NUMBER_OF_SAMPLES&#x3D;1000), 这里先是以1000 为采样样本总数，然后根据设置采样的采样率设置随机采样点样本，每1000次都按这个采样的样点进行采样</p>\n<ol>\n<li><p>添加默认采样样本总体上变量和采样率开关变量，修改内容 SamplingService类45-47行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//默认采样样本总体上</span><br><span class=\"line\">private static final int NUMBER_OF_SAMPLES = 1000;</span><br><span class=\"line\">private volatile boolean proportion = false;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断配置是否开启采样率开关，修改内容 SamplingService类77-83行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; else if(Config.Agent.SAMPLE_N_PER_PROPORTION &gt; 0) &#123;</span><br><span class=\"line\">    proportion = true;</span><br><span class=\"line\">    this.resetProportionFactor();</span><br><span class=\"line\">    initCollectionPoints();</span><br><span class=\"line\">    logger.debug(</span><br><span class=\"line\">            &quot;Agent sampling mechanism started. Sample &#123;&#125; traces in 3 seconds.&quot;, Config.Agent.SAMPLE_N_PER_PROPORTION);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断是否采样方法添加采样率判断方法，修改内容 SamplingService类108-118行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;else if (proportion) &#123;</span><br><span class=\"line\">    int factor = samplingFactorHolder.get();</span><br><span class=\"line\">    if(map.get(factor)) &#123;</span><br><span class=\"line\">        return samplingFactorHolder.compareAndSet(factor, factor + 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //判断是否已经次数已经超过样本数，如果是重置采样次数（采样次数并非样本单位数）</span><br><span class=\"line\">    if(factor==NUMBER_OF_SAMPLES) &#123;</span><br><span class=\"line\">        resetProportionFactor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>添加重置样本采样次数方法，修改类 SamplingService类135-137行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void resetProportionFactor() &#123;</span><br><span class=\"line\">    samplingFactorHolder = new AtomicInteger(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>添加初始化样本单位数的采集点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void initCollectionPoints()&#123;</span><br><span class=\"line\">    map = new HashMap&lt;&gt;();</span><br><span class=\"line\">    int count=0;</span><br><span class=\"line\">    int[] result = new int[Config.Agent.SAMPLE_N_PER_PROPORTION];</span><br><span class=\"line\">    while (count&lt; Config.Agent.SAMPLE_N_PER_PROPORTION) &#123;</span><br><span class=\"line\">        int num = (int) (Math.random() * (NUMBER_OF_SAMPLES-1))+1;</span><br><span class=\"line\">        boolean flag =true;</span><br><span class=\"line\">        for (int index= 0; index &lt; Config.Agent.SAMPLE_N_PER_PROPORTION; index++) &#123;</span><br><span class=\"line\">            if(num == result[index])&#123;</span><br><span class=\"line\">                flag=false;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(flag)&#123;</span><br><span class=\"line\">            map.put(count, true);</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"SamplingService-java\"><a href=\"#SamplingService-java\" class=\"headerlink\" title=\"SamplingService.java\"></a>SamplingService.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class=\"line\"><span class=\"comment\"> * contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class=\"line\"><span class=\"comment\"> * this work for additional information regarding copyright ownership.</span></span><br><span class=\"line\"><span class=\"comment\"> * The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class=\"line\"><span class=\"comment\"> * (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class=\"line\"><span class=\"comment\"> * the License.  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.apache.skywalking.apm.agent.core.sampling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.boot.BootService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.conf.Config;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.logging.api.ILog;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.logging.api.LogManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.util.RunnableWithExceptionProtection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The &lt;code&gt;SamplingService&lt;/code&gt; take charge of how to sample the &#123;<span class=\"doctag\">@link</span> TraceSegment&#125;. Every &#123;<span class=\"doctag\">@link</span> TraceSegment&#125;s</span></span><br><span class=\"line\"><span class=\"comment\"> * have been traced, but, considering CPU cost of serialization/deserialization, and network bandwidth, the agent do NOT</span></span><br><span class=\"line\"><span class=\"comment\"> * send all of them to collector, if SAMPLING is on.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * By default, SAMPLING is on, and  &#123;<span class=\"doctag\">@link</span> Config.Agent#SAMPLE_N_PER_3_SECS &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@DefaultImplementor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SamplingService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BootService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">ILog</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LogManager.getLogger(SamplingService.class);</span><br><span class=\"line\">    <span class=\"comment\">//默认采样样本总体上</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">NUMBER_OF_SAMPLES</span> <span class=\"operator\">=</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">boolean</span> <span class=\"variable\">per3secs</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">boolean</span> <span class=\"variable\">proportion</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> AtomicInteger samplingFactorHolder;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Map&lt;Integer, Boolean&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> ScheduledFuture&lt;?&gt; scheduledFuture;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">prepare</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">boot</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scheduledFuture != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * If &#123;@link #boot()&#125; invokes twice, mostly in test cases,</span></span><br><span class=\"line\"><span class=\"comment\">             * cancel the old one.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            scheduledFuture.cancel(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Config.Agent.SAMPLE_N_PER_3_SECS &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            per3secs = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.resetSamplingFactor();</span><br><span class=\"line\">            <span class=\"type\">ScheduledExecutorService</span> <span class=\"variable\">service</span> <span class=\"operator\">=</span> Executors.newSingleThreadScheduledExecutor(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultNamedThreadFactory</span>(<span class=\"string\">&quot;SamplingService&quot;</span>));</span><br><span class=\"line\">            scheduledFuture = service.scheduleAtFixedRate(<span class=\"keyword\">new</span> <span class=\"title class_\">RunnableWithExceptionProtection</span>(</span><br><span class=\"line\">                <span class=\"built_in\">this</span>::resetSamplingFactor, t -&gt; logger.error(<span class=\"string\">&quot;unexpected exception.&quot;</span>, t)), <span class=\"number\">0</span>, <span class=\"number\">3</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">            logger.debug(</span><br><span class=\"line\">                <span class=\"string\">&quot;Agent sampling mechanism started. Sample &#123;&#125; traces in 3 seconds.&quot;</span>, Config.Agent.SAMPLE_N_PER_3_SECS);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(Config.Agent.SAMPLE_N_PER_PROPORTION &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            proportion = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.resetProportionFactor();</span><br><span class=\"line\">            initCollectionPoints();</span><br><span class=\"line\">            logger.debug(</span><br><span class=\"line\">                    <span class=\"string\">&quot;Agent sampling mechanism started. Sample &#123;&#125; traces in 3 seconds.&quot;</span>, Config.Agent.SAMPLE_N_PER_PROPORTION);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onComplete</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shutdown</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scheduledFuture != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            scheduledFuture.cancel(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true, if sampling mechanism is on, and getDefault the sampling factor successfully.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">trySampling</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (per3secs) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">factor</span> <span class=\"operator\">=</span> samplingFactorHolder.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (factor &lt; Config.Agent.SAMPLE_N_PER_3_SECS) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> samplingFactorHolder.compareAndSet(factor, factor + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (proportion) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">factor</span> <span class=\"operator\">=</span> samplingFactorHolder.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.get(factor)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> samplingFactorHolder.compareAndSet(factor, factor + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//判断是否已经次数已经超过样本数，如果是重置采样次数（采样次数并非样本单位数）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(factor==NUMBER_OF_SAMPLES) &#123;</span><br><span class=\"line\">                resetProportionFactor();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Increase the sampling factor by force, to avoid sampling too many traces. If many distributed traces require</span></span><br><span class=\"line\"><span class=\"comment\">     * sampled, the trace beginning at local, has less chance to be sampled.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">forceSampled</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (per3secs||proportion) &#123;</span><br><span class=\"line\">            samplingFactorHolder.incrementAndGet();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">resetSamplingFactor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        samplingFactorHolder = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">resetProportionFactor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        samplingFactorHolder = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化样本单位数的采集点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initCollectionPoints</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[Config.Agent.SAMPLE_N_PER_PROPORTION];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count&lt; Config.Agent.SAMPLE_N_PER_PROPORTION) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) (Math.random() * (NUMBER_OF_SAMPLES-<span class=\"number\">1</span>))+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> index= <span class=\"number\">0</span>; index &lt; Config.Agent.SAMPLE_N_PER_PROPORTION; index++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(num == result[index])&#123;</span><br><span class=\"line\">                    flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">                map.put(count, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"skywalking-调用链开关设置\"><a href=\"#skywalking-调用链开关设置\" class=\"headerlink\" title=\"skywalking 调用链开关设置\"></a>skywalking 调用链开关设置</h3><p>思路：在jvm环境变量设置是否开启调用链开关，然后在其代码增强地方加if-else判断。</p>\n<ol>\n<li><p>修改内容 InstMethodsInter类77-89行 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//回去jvm 环境变量值sw-collection,并设置默认值为1</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">swCollection</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;sw-collection&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">logger.info(<span class=\"string\">&quot;skyWalking-enabled  [&#123;&#125;].&quot;</span>, swCollection);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(swCollection.equals(<span class=\"string\">&quot;1&quot;</span>))    &#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;skyWalking interceptor beforeMethod&quot;</span>);</span><br><span class=\"line\">        interceptor.beforeMethod(targetObject, method, allArguments, method.getParameterTypes(), result);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;skyWalking not interceptor beforeMethod&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">    logger.error(t, <span class=\"string\">&quot;class[&#123;&#125;] before method[&#123;&#125;] intercept failure&quot;</span>, obj.getClass(), method.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>添加方法调用后置处理内容 InstMethodsInter类107-113行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(swCollection.equals(<span class=\"string\">&quot;1&quot;</span>)) &#123;</span><br><span class=\"line\">        ret = interceptor.afterMethod(targetObject, method, allArguments, method.getParameterTypes(), ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">    logger.error(t, <span class=\"string\">&quot;class[&#123;&#125;] after method[&#123;&#125;] intercept failure&quot;</span>, obj.getClass(), method.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"InstMethodsInter-java\"><a href=\"#InstMethodsInter-java\" class=\"headerlink\" title=\"InstMethodsInter.java\"></a>InstMethodsInter.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class=\"line\"><span class=\"comment\"> * contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class=\"line\"><span class=\"comment\"> * this work for additional information regarding copyright ownership.</span></span><br><span class=\"line\"><span class=\"comment\"> * The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class=\"line\"><span class=\"comment\"> * (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class=\"line\"><span class=\"comment\"> * the License.  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.bytebuddy.implementation.bind.annotation.AllArguments;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.bytebuddy.implementation.bind.annotation.Origin;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.bytebuddy.implementation.bind.annotation.RuntimeType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.bytebuddy.implementation.bind.annotation.SuperCall;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.bytebuddy.implementation.bind.annotation.This;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.logging.api.LogManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.plugin.PluginException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.plugin.loader.InterceptorInstanceLoader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.agent.core.logging.api.ILog;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.skywalking.apm.util.StringUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The actual byte-buddy&#x27;s interceptor to intercept class instance methods. In this class, it provide a bridge between</span></span><br><span class=\"line\"><span class=\"comment\"> * byte-buddy and sky-walking plugin.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InstMethodsInter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">ILog</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LogManager.getLogger(InstMethodsInter.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * An &#123;<span class=\"doctag\">@link</span> InstanceMethodsAroundInterceptor&#125; This name should only stay in &#123;<span class=\"doctag\">@link</span> String&#125;, the real &#123;<span class=\"doctag\">@link</span> Class&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * type will trigger classloader failure. If you want to know more, please check on books about Classloader or</span></span><br><span class=\"line\"><span class=\"comment\">     * Classloader appointment mechanism.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> InstanceMethodsAroundInterceptor interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> instanceMethodsAroundInterceptorClassName class full name.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">InstMethodsInter</span><span class=\"params\">(String instanceMethodsAroundInterceptorClassName, ClassLoader classLoader)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            interceptor = InterceptorInstanceLoader.load(instanceMethodsAroundInterceptorClassName, classLoader);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PluginException</span>(<span class=\"string\">&quot;Can&#x27;t create InstanceMethodsAroundInterceptor.&quot;</span>, t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Intercept the target instance method.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> obj          target class instance.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> allArguments all method arguments</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method       method description.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> zuper        the origin call ref.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the return value of target instance method.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception only throw exception because of zuper.call() or unexpected exception in sky-walking ( This is a</span></span><br><span class=\"line\"><span class=\"comment\">     *                   bug, if anything triggers this condition ).</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RuntimeType</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(<span class=\"meta\">@This</span> Object obj, <span class=\"meta\">@AllArguments</span> Object[] allArguments, <span class=\"meta\">@SuperCall</span> Callable&lt;?&gt; zuper,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"meta\">@Origin</span> Method method)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"type\">EnhancedInstance</span> <span class=\"variable\">targetObject</span> <span class=\"operator\">=</span> (EnhancedInstance) obj;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">MethodInterceptResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MethodInterceptResult</span>();</span><br><span class=\"line\">        <span class=\"comment\">//回去jvm 环境变量值sw-collection,并设置默认值为1</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">swCollection</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;sw-collection&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;skyWalking-enabled  [&#123;&#125;].&quot;</span>, swCollection);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(swCollection.equals(<span class=\"string\">&quot;1&quot;</span>))    &#123;</span><br><span class=\"line\">                logger.info(<span class=\"string\">&quot;skyWalking interceptor beforeMethod&quot;</span>);</span><br><span class=\"line\">                interceptor.beforeMethod(targetObject, method, allArguments, method.getParameterTypes(), result);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                logger.info(<span class=\"string\">&quot;skyWalking not interceptor beforeMethod&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            logger.error(t, <span class=\"string\">&quot;class[&#123;&#125;] before method[&#123;&#125;] intercept failure&quot;</span>, obj.getClass(), method.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!result.isContinue()) &#123;</span><br><span class=\"line\">                ret = result._ret();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ret = zuper.call();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                interceptor.handleMethodException(targetObject, method, allArguments, method.getParameterTypes(), t);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t2) &#123;</span><br><span class=\"line\">                logger.error(t2, <span class=\"string\">&quot;class[&#123;&#125;] handle method[&#123;&#125;] exception failure&quot;</span>, obj.getClass(), method.getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> t;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(swCollection.equals(<span class=\"string\">&quot;1&quot;</span>)) &#123;</span><br><span class=\"line\">                    ret = interceptor.afterMethod(targetObject, method, allArguments, method.getParameterTypes(), ret);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                logger.error(t, <span class=\"string\">&quot;class[&#123;&#125;] after method[&#123;&#125;] intercept failure&quot;</span>, obj.getClass(), method.getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"动态配置使用说明\"><a href=\"#动态配置使用说明\" class=\"headerlink\" title=\"动态配置使用说明\"></a>动态配置使用说明</h3><h4 id=\"动态开关\"><a href=\"#动态开关\" class=\"headerlink\" title=\"动态开关\"></a>动态开关</h4><p> 设置jvm变量 sw-collection 变量值 0：关闭，1：开启（默认值为0），使用方法在启动-Dsw-collection&#x3D;0</p>\n<p>如果在运行中需要变更采样开关 调用 System.setProperty(“sw-collection”, “0”) 方法设置调用链开关;</p>\n<h4 id=\"采样率设置\"><a href=\"#采样率设置\" class=\"headerlink\" title=\"采样率设置\"></a>采样率设置</h4><p> 设置jvm变量sample-per-proportion 变量值为1-100整数，使用方法在启动-Dsample-per-proportion &#x3D;60，</p>\n<p>如果在运行中需要变更采样开关 调用 System.setProperty(“sample-per-proportion ”, “50”) 方法设置调用链开关;</p>\n<p>​\t</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clhitswwr00042kfw1c75ex0y","category_id":"clhitswwv00052kfwbie7ftzs","_id":"clhitswx1000b2kfwa28q0ajz"},{"post_id":"clhitswwr00042kfw1c75ex0y","category_id":"clhitswwz00082kfw8mkkglqu","_id":"clhitswx1000c2kfwbwwu0vh8"}],"PostTag":[{"post_id":"clhitswwr00042kfw1c75ex0y","tag_id":"clhitswwx00062kfw39bl01gc","_id":"clhitswx000092kfw746hb544"},{"post_id":"clhitswwr00042kfw1c75ex0y","tag_id":"clhitswwz00072kfw2fsyamnt","_id":"clhitswx1000a2kfwcns51o55"}],"Tag":[{"name":"java","_id":"clhitswwx00062kfw39bl01gc"},{"name":"skywalking","_id":"clhitswwz00072kfw2fsyamnt"}]}}