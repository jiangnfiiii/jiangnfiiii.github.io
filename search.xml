<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/11/hello-world/"/>
      <url>/2023/05/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>skywalking-采样率</title>
      <link href="/2023/05/09/skywalking-%E9%87%87%E6%A0%B7%E7%8E%87/"/>
      <url>/2023/05/09/skywalking-%E9%87%87%E6%A0%B7%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<p>思路： 设置默认样本数(NUMBER_OF_SAMPLES&#x3D;1000), 这里先是以1000 为采样样本总数，然后根据设置采样的采样率设置随机采样点样本，每1000次都按这个采样的样点进行采样</p><ol><li><p>添加默认采样样本总体上变量和采样率开关变量，修改内容 SamplingService类45-47行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//默认采样样本总体上</span><br><span class="line">private static final int NUMBER_OF_SAMPLES = 1000;</span><br><span class="line">private volatile boolean proportion = false;</span><br></pre></td></tr></table></figure></li><li><p>判断配置是否开启采样率开关，修改内容 SamplingService类77-83行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#125; else if(Config.Agent.SAMPLE_N_PER_PROPORTION &gt; 0) &#123;</span><br><span class="line">    proportion = true;</span><br><span class="line">    this.resetProportionFactor();</span><br><span class="line">    initCollectionPoints();</span><br><span class="line">    logger.debug(</span><br><span class="line">            &quot;Agent sampling mechanism started. Sample &#123;&#125; traces in 3 seconds.&quot;, Config.Agent.SAMPLE_N_PER_PROPORTION);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断是否采样方法添加采样率判断方法，修改内容 SamplingService类108-118行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#125;else if (proportion) &#123;</span><br><span class="line">    int factor = samplingFactorHolder.get();</span><br><span class="line">    if(map.get(factor)) &#123;</span><br><span class="line">        return samplingFactorHolder.compareAndSet(factor, factor + 1);</span><br><span class="line">    &#125;</span><br><span class="line">    //判断是否已经次数已经超过样本数，如果是重置采样次数（采样次数并非样本单位数）</span><br><span class="line">    if(factor==NUMBER_OF_SAMPLES) &#123;</span><br><span class="line">        resetProportionFactor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加重置样本采样次数方法，修改类 SamplingService类135-137行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private void resetProportionFactor() &#123;</span><br><span class="line">    samplingFactorHolder = new AtomicInteger(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加初始化样本单位数的采集点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public void initCollectionPoints()&#123;</span><br><span class="line">    map = new HashMap&lt;&gt;();</span><br><span class="line">    int count=0;</span><br><span class="line">    int[] result = new int[Config.Agent.SAMPLE_N_PER_PROPORTION];</span><br><span class="line">    while (count&lt; Config.Agent.SAMPLE_N_PER_PROPORTION) &#123;</span><br><span class="line">        int num = (int) (Math.random() * (NUMBER_OF_SAMPLES-1))+1;</span><br><span class="line">        boolean flag =true;</span><br><span class="line">        for (int index= 0; index &lt; Config.Agent.SAMPLE_N_PER_PROPORTION; index++) &#123;</span><br><span class="line">            if(num == result[index])&#123;</span><br><span class="line">                flag=false;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(flag)&#123;</span><br><span class="line">            map.put(count, true);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="SamplingService-java"><a href="#SamplingService-java" class="headerlink" title="SamplingService.java"></a>SamplingService.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment"> * contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment"> * this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment"> * (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment"> * the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.skywalking.apm.agent.core.sampling;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.skywalking.apm.agent.core.boot.BootService;</span><br><span class="line"><span class="keyword">import</span> org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;</span><br><span class="line"><span class="keyword">import</span> org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.skywalking.apm.agent.core.conf.Config;</span><br><span class="line"><span class="keyword">import</span> org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;</span><br><span class="line"><span class="keyword">import</span> org.apache.skywalking.apm.agent.core.logging.api.ILog;</span><br><span class="line"><span class="keyword">import</span> org.apache.skywalking.apm.agent.core.logging.api.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.skywalking.apm.util.RunnableWithExceptionProtection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &lt;code&gt;SamplingService&lt;/code&gt; take charge of how to sample the &#123;<span class="doctag">@link</span> TraceSegment&#125;. Every &#123;<span class="doctag">@link</span> TraceSegment&#125;s</span></span><br><span class="line"><span class="comment"> * have been traced, but, considering CPU cost of serialization/deserialization, and network bandwidth, the agent do NOT</span></span><br><span class="line"><span class="comment"> * send all of them to collector, if SAMPLING is on.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * By default, SAMPLING is on, and  &#123;<span class="doctag">@link</span> Config.Agent#SAMPLE_N_PER_3_SECS &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DefaultImplementor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SamplingService</span> <span class="keyword">implements</span> <span class="title class_">BootService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ILog</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(SamplingService.class);</span><br><span class="line">    <span class="comment">//默认采样样本总体上</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NUMBER_OF_SAMPLES</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">per3secs</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">proportion</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> AtomicInteger samplingFactorHolder;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;Integer, Boolean&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> ScheduledFuture&lt;?&gt; scheduledFuture;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">boot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scheduledFuture != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * If &#123;@link #boot()&#125; invokes twice, mostly in test cases,</span></span><br><span class="line"><span class="comment">             * cancel the old one.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            scheduledFuture.cancel(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Config.Agent.SAMPLE_N_PER_3_SECS &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            per3secs = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">this</span>.resetSamplingFactor();</span><br><span class="line">            <span class="type">ScheduledExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DefaultNamedThreadFactory</span>(<span class="string">&quot;SamplingService&quot;</span>));</span><br><span class="line">            scheduledFuture = service.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">RunnableWithExceptionProtection</span>(</span><br><span class="line">                <span class="built_in">this</span>::resetSamplingFactor, t -&gt; logger.error(<span class="string">&quot;unexpected exception.&quot;</span>, t)), <span class="number">0</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">            logger.debug(</span><br><span class="line">                <span class="string">&quot;Agent sampling mechanism started. Sample &#123;&#125; traces in 3 seconds.&quot;</span>, Config.Agent.SAMPLE_N_PER_3_SECS);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(Config.Agent.SAMPLE_N_PER_PROPORTION &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            proportion = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">this</span>.resetProportionFactor();</span><br><span class="line">            initCollectionPoints();</span><br><span class="line">            logger.debug(</span><br><span class="line">                    <span class="string">&quot;Agent sampling mechanism started. Sample &#123;&#125; traces in 3 seconds.&quot;</span>, Config.Agent.SAMPLE_N_PER_PROPORTION);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scheduledFuture != <span class="literal">null</span>) &#123;</span><br><span class="line">            scheduledFuture.cancel(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true, if sampling mechanism is on, and getDefault the sampling factor successfully.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">trySampling</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (per3secs) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">factor</span> <span class="operator">=</span> samplingFactorHolder.get();</span><br><span class="line">            <span class="keyword">if</span> (factor &lt; Config.Agent.SAMPLE_N_PER_3_SECS) &#123;</span><br><span class="line">                <span class="keyword">return</span> samplingFactorHolder.compareAndSet(factor, factor + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (proportion) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">factor</span> <span class="operator">=</span> samplingFactorHolder.get();</span><br><span class="line">            <span class="keyword">if</span>(map.get(factor)) &#123;</span><br><span class="line">                <span class="keyword">return</span> samplingFactorHolder.compareAndSet(factor, factor + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断是否已经次数已经超过样本数，如果是重置采样次数（采样次数并非样本单位数）</span></span><br><span class="line">            <span class="keyword">if</span>(factor==NUMBER_OF_SAMPLES) &#123;</span><br><span class="line">                resetProportionFactor();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Increase the sampling factor by force, to avoid sampling too many traces. If many distributed traces require</span></span><br><span class="line"><span class="comment">     * sampled, the trace beginning at local, has less chance to be sampled.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forceSampled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (per3secs||proportion) &#123;</span><br><span class="line">            samplingFactorHolder.incrementAndGet();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resetSamplingFactor</span><span class="params">()</span> &#123;</span><br><span class="line">        samplingFactorHolder = <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resetProportionFactor</span><span class="params">()</span> &#123;</span><br><span class="line">        samplingFactorHolder = <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化样本单位数的采集点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initCollectionPoints</span><span class="params">()</span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[Config.Agent.SAMPLE_N_PER_PROPORTION];</span><br><span class="line">        <span class="keyword">while</span> (count&lt; Config.Agent.SAMPLE_N_PER_PROPORTION) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * (NUMBER_OF_SAMPLES-<span class="number">1</span>))+<span class="number">1</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> index= <span class="number">0</span>; index &lt; Config.Agent.SAMPLE_N_PER_PROPORTION; index++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(num == result[index])&#123;</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                map.put(count, <span class="literal">true</span>);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="skywalking-调用链开关设置"><a href="#skywalking-调用链开关设置" class="headerlink" title="skywalking 调用链开关设置"></a>skywalking 调用链开关设置</h3><p>思路：在jvm环境变量设置是否开启调用链开关，然后在其代码增强地方加if-else判断。</p><ol><li><p>修改内容 InstMethodsInter类77-89行 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回去jvm 环境变量值sw-collection,并设置默认值为1</span></span><br><span class="line"><span class="type">String</span> <span class="variable">swCollection</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;sw-collection&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">logger.info(<span class="string">&quot;skyWalking-enabled  [&#123;&#125;].&quot;</span>, swCollection);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过</span></span><br><span class="line">    <span class="keyword">if</span>(swCollection.equals(<span class="string">&quot;1&quot;</span>))    &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;skyWalking interceptor beforeMethod&quot;</span>);</span><br><span class="line">        interceptor.beforeMethod(targetObject, method, allArguments, method.getParameterTypes(), result);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;skyWalking not interceptor beforeMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    logger.error(t, <span class="string">&quot;class[&#123;&#125;] before method[&#123;&#125;] intercept failure&quot;</span>, obj.getClass(), method.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加方法调用后置处理内容 InstMethodsInter类107-113行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过</span></span><br><span class="line">    <span class="keyword">if</span>(swCollection.equals(<span class="string">&quot;1&quot;</span>)) &#123;</span><br><span class="line">        ret = interceptor.afterMethod(targetObject, method, allArguments, method.getParameterTypes(), ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    logger.error(t, <span class="string">&quot;class[&#123;&#125;] after method[&#123;&#125;] intercept failure&quot;</span>, obj.getClass(), method.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="InstMethodsInter-java"><a href="#InstMethodsInter-java" class="headerlink" title="InstMethodsInter.java"></a>InstMethodsInter.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment"> * contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment"> * this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment"> * (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment"> * the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.AllArguments;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.Origin;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.RuntimeType;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.SuperCall;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.This;</span><br><span class="line"><span class="keyword">import</span> org.apache.skywalking.apm.agent.core.logging.api.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.skywalking.apm.agent.core.plugin.PluginException;</span><br><span class="line"><span class="keyword">import</span> org.apache.skywalking.apm.agent.core.plugin.loader.InterceptorInstanceLoader;</span><br><span class="line"><span class="keyword">import</span> org.apache.skywalking.apm.agent.core.logging.api.ILog;</span><br><span class="line"><span class="keyword">import</span> org.apache.skywalking.apm.util.StringUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The actual byte-buddy&#x27;s interceptor to intercept class instance methods. In this class, it provide a bridge between</span></span><br><span class="line"><span class="comment"> * byte-buddy and sky-walking plugin.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstMethodsInter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ILog</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(InstMethodsInter.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An &#123;<span class="doctag">@link</span> InstanceMethodsAroundInterceptor&#125; This name should only stay in &#123;<span class="doctag">@link</span> String&#125;, the real &#123;<span class="doctag">@link</span> Class&#125;</span></span><br><span class="line"><span class="comment">     * type will trigger classloader failure. If you want to know more, please check on books about Classloader or</span></span><br><span class="line"><span class="comment">     * Classloader appointment mechanism.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> InstanceMethodsAroundInterceptor interceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> instanceMethodsAroundInterceptorClassName class full name.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InstMethodsInter</span><span class="params">(String instanceMethodsAroundInterceptorClassName, ClassLoader classLoader)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            interceptor = InterceptorInstanceLoader.load(instanceMethodsAroundInterceptorClassName, classLoader);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PluginException</span>(<span class="string">&quot;Can&#x27;t create InstanceMethodsAroundInterceptor.&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Intercept the target instance method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj          target class instance.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> allArguments all method arguments</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method       method description.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> zuper        the origin call ref.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the return value of target instance method.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception only throw exception because of zuper.call() or unexpected exception in sky-walking ( This is a</span></span><br><span class="line"><span class="comment">     *                   bug, if anything triggers this condition ).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RuntimeType</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(<span class="meta">@This</span> Object obj, <span class="meta">@AllArguments</span> Object[] allArguments, <span class="meta">@SuperCall</span> Callable&lt;?&gt; zuper,</span></span><br><span class="line"><span class="params">        <span class="meta">@Origin</span> Method method)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">EnhancedInstance</span> <span class="variable">targetObject</span> <span class="operator">=</span> (EnhancedInstance) obj;</span><br><span class="line"></span><br><span class="line">        <span class="type">MethodInterceptResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodInterceptResult</span>();</span><br><span class="line">        <span class="comment">//回去jvm 环境变量值sw-collection,并设置默认值为1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">swCollection</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;sw-collection&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;skyWalking-enabled  [&#123;&#125;].&quot;</span>, swCollection);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过</span></span><br><span class="line">            <span class="keyword">if</span>(swCollection.equals(<span class="string">&quot;1&quot;</span>))    &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;skyWalking interceptor beforeMethod&quot;</span>);</span><br><span class="line">                interceptor.beforeMethod(targetObject, method, allArguments, method.getParameterTypes(), result);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;skyWalking not interceptor beforeMethod&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            logger.error(t, <span class="string">&quot;class[&#123;&#125;] before method[&#123;&#125;] intercept failure&quot;</span>, obj.getClass(), method.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!result.isContinue()) &#123;</span><br><span class="line">                ret = result._ret();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ret = zuper.call();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                interceptor.handleMethodException(targetObject, method, allArguments, method.getParameterTypes(), t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t2) &#123;</span><br><span class="line">                logger.error(t2, <span class="string">&quot;class[&#123;&#125;] handle method[&#123;&#125;] exception failure&quot;</span>, obj.getClass(), method.getName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> t;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//判断jvm 设置的环境变量值是否为1， 如果1: 执行调用链设置，如果不是这跳过</span></span><br><span class="line">                <span class="keyword">if</span>(swCollection.equals(<span class="string">&quot;1&quot;</span>)) &#123;</span><br><span class="line">                    ret = interceptor.afterMethod(targetObject, method, allArguments, method.getParameterTypes(), ret);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                logger.error(t, <span class="string">&quot;class[&#123;&#125;] after method[&#123;&#125;] intercept failure&quot;</span>, obj.getClass(), method.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动态配置使用说明"><a href="#动态配置使用说明" class="headerlink" title="动态配置使用说明"></a>动态配置使用说明</h3><h4 id="动态开关"><a href="#动态开关" class="headerlink" title="动态开关"></a>动态开关</h4><p> 设置jvm变量 sw-collection 变量值 0：关闭，1：开启（默认值为0），使用方法在启动-Dsw-collection&#x3D;0</p><p>如果在运行中需要变更采样开关 调用 System.setProperty(“sw-collection”, “0”) 方法设置调用链开关;</p><h4 id="采样率设置"><a href="#采样率设置" class="headerlink" title="采样率设置"></a>采样率设置</h4><p> 设置jvm变量sample-per-proportion 变量值为1-100整数，使用方法在启动-Dsample-per-proportion &#x3D;60，</p><p>如果在运行中需要变更采样开关 调用 System.setProperty(“sample-per-proportion ”, “50”) 方法设置调用链开关;</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 链路追踪 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> skywalking </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
